# main.py
import asyncio
import uvicorn
from fastapi import FastAPI
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
import asyncpg
import logging
import sys
import os
import aiofiles
from pathlib import Path
from collections import defaultdict

# === –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ===
from config import API_TOKEN, CHANNEL_ID
from db import init_db
from models import save_message_to_db, save_media_group_to_db
from api import app  # FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ ===
MEDIA_ROOT = Path("/var/www/uploads")
IMAGE_DIR = MEDIA_ROOT / "img"
VIDEO_DIR = MEDIA_ROOT / "video"
AUDIO_DIR = MEDIA_ROOT / "audio"
DOCUMENT_DIR = MEDIA_ROOT / "documents"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
for directory in [MEDIA_ROOT, IMAGE_DIR, VIDEO_DIR, AUDIO_DIR, DOCUMENT_DIR]:
    directory.mkdir(exist_ok=True, parents=True)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ–¥–∏–∞ ===
media_groups = defaultdict(list)
media_group_timers = {}

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ ===
async def download_and_save_media(file_id, media_type, message_id):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if media_type == "photo":
            directory = IMAGE_DIR
            extension = "jpg"
        elif media_type == "video":
            directory = VIDEO_DIR
            extension = "mp4"
        elif media_type == "audio":
            directory = AUDIO_DIR
            extension = "mp3"
        elif media_type == "voice":
            directory = AUDIO_DIR
            extension = "mp3"
        elif media_type == "document":
            directory = DOCUMENT_DIR
            extension = "file"  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        elif media_type == "animation":
            directory = VIDEO_DIR
            extension = "mp4"
        else:
            return None


        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è message_id –≤–º–µ—Å—Ç–æ file_unique_id
        filename = f"{message_id}_{media_type}.{extension}"
        filepath = directory / filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        
        if file_info.file_size and file_info.file_size > 20 * 1024 * 1024:
                logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_info.file_size} bytes) –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Bot API: {file_id}")
                return None

        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if media_type == "document" and "." in file_path:
            extension = file_path.split(".")[-1]
            filename = f"{message_id}_{media_type}.{extension}"
            filepath = directory / filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await bot.download_file(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        async with aiofiles.open(filepath, 'wb') as f:
            await f.write(file_content.read())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        relative_path = f"uploads/{directory.name}/{filename}"
        url = f"http://anotsenimzhizn.ru/{relative_path}"
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filepath}, URL: {url}")
        return url
    
    except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∫—Ä–∞—à–∞ –±–æ—Ç–∞
            return None

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ ===
async def process_media_group(media_group_id):
    if media_group_id not in media_groups:
        return
    
    messages = media_groups[media_group_id]
    if not messages:
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
    main_message = messages[0]
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ URLs
    media_urls = []
    media_types = []
    
    for msg_data in messages:
        if msg_data['media_url']:
            media_urls.append(msg_data['media_url'])
            media_types.append(msg_data['media_type'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–¥–∏–∞
    await save_media_group_to_db(
        dp.pool,
        message_id=main_message['message_id'],
        text=main_message['text'],
        media_types=media_types,
        media_urls=media_urls,
        media_group_id=media_group_id
    )
    
    # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É
    del media_groups[media_group_id]
    if media_group_id in media_group_timers:
        media_group_timers[media_group_id].cancel()
        del media_group_timers[media_group_id]
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞ {media_group_id} —Å {len(messages)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ ===
@dp.channel_post(F.chat.id == CHANNEL_ID)
async def log_channel_message(message: Message):
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID} (ID: {message.message_id})")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    content = message.text or message.caption or ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
    media_type = None
    file_id = None
    media_url = None

    if message.photo:
        media_type = "photo"
        file_id = message.photo[-1].file_id
    elif message.video:
        media_type = "video"
        file_id = message.video.file_id
    elif message.document:
        media_type = "document"
        file_id = message.document.file_id
    elif message.audio:
        media_type = "audio"
        file_id = message.audio.file_id
    elif message.voice:
        media_type = "voice"
        file_id = message.voice.file_id
    elif message.animation:
        media_type = "animation"
        file_id = message.animation.file_id

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if media_type and file_id:
        media_url = await download_and_save_media(file_id, media_type, message.message_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞
    if message.media_group_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        media_groups[message.media_group_id].append({
            'message_id': message.message_id,
            'text': content,
            'media_type': media_type,
            'media_url': media_url
        })
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.media_group_id in media_group_timers:
            media_group_timers[message.media_group_id].cancel()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø—ã (–∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã)
        media_group_timers[message.media_group_id] = asyncio.create_task(
            asyncio.sleep(2)
        )
        
        try:
            await media_group_timers[message.media_group_id]
            await process_media_group(message.media_group_id)
        except asyncio.CancelledError:
            pass
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        await save_message_to_db(
            dp.pool,
            message_id=message.message_id,
            text=content,
            media_type=media_type,
            media_url=media_url
        )

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def run_bot():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        await bot.delete_webhook()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    dp.pool = await asyncpg.create_pool(**config.DB_CONFIG)
    await init_db(dp.pool)
    me = await bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, allowed_updates=["message", "channel_post"])

# === –ó–∞–ø—É—Å–∫ FastAPI –∏ –±–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ ===
async def main():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    dp.pool = await asyncpg.create_pool(**config.DB_CONFIG)
    await init_db(dp.pool)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
    me = await bot.get_me()
    logger.info(f"ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{me.username}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    api_server = uvicorn.Server(uvicorn.Config(app, host="0.0.0.0", port=8000))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        api_server.serve(),
        run_bot()
    )

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    import config  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—É—Ç–∏ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    asyncio.run(main())
